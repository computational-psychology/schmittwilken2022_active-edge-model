"""
Script that reads in results for test case 2 from pickle files and visualizes them.

Last update on 08.06.2022
@author: lynnschmittwilken
"""

import matplotlib.pyplot as plt
import pickle
import sys

# Let's read in params and functions from simulations:
sim_path = '../../simulations/'
sys.path.append(sim_path)
import parameters as params


#########################################
#            Read-in results            #
#########################################
results_path = sim_path + params.results_path2


# Results for no noise condition:
with open(results_path + 'noise_0.0/edge_corr.pickle', 'rb') as handle:
    res_nonoise = pickle.load(handle)

# Results for noise condition:
with open(results_path + 'noise_0.1/edge_corr.pickle', 'rb') as handle:
    res_noise = pickle.load(handle)


# Function to visualize data based on results-dict:
def plot_results(res_dict, filename: str):
    """Function to visualize results generated by main_case2.py.

    Parameters
    ----------
    res_dict
        Dict with performances of all models.
    filename
        Filename of results plot.

    """

    # Spatiotemporal filtering followed by squared mean and global normalization
    corrs_m = res_dict['corrs_ST_M_N']

    # Spatial filtering followed by squared mean and global normalization
    corrs_c1 = res_dict['corrs_S_M_N']

    # Spatiotemporal filtering followed by squared mean
    corrs_c2 = res_dict['corrs_ST_M']

    # Temporal filtering followed by squared mean
    corrs_c4 = res_dict['corrs_T_M']

    # Spatial filtering followed by variance and global normalization
    corrs_v1 = res_dict['corrs_S_V_N']

    # Spatial filtering followed by variance
    corrs_v2 = res_dict['corrs_S_V']

    # No filtering followed by variance
    corrs_v3 = res_dict['corrs_V']

    # Canny
    corrs_canny = res_dict['corrs_canny']

    # Plotting
    lw = 2.5
    ls = '-'
    al = 0.1

    plt.figure(figsize=(4, 4.5))
    plt.plot(corrs_m.mean(1), 'C0o', linewidth=lw, alpha=al)
    plt.axhline(corrs_m.mean(), color='C0', linewidth=lw, linestyle=ls, label='ST-M-N*')

    plt.plot(corrs_c1.mean(1), 'C1o', linewidth=lw, alpha=al)
    plt.axhline(corrs_c1.mean(), color='C1', linewidth=lw, linestyle=ls, label='S-M-N')

    plt.plot(corrs_c2.mean(1), 'C2o', linewidth=lw, alpha=al)
    plt.axhline(corrs_c2.mean(), color='C2', linewidth=lw, linestyle=ls, label='ST-M')

    plt.plot(corrs_c4.mean(1), 'C4o', linewidth=lw, alpha=al)
    plt.axhline(corrs_c4.mean(), color='C4', linewidth=lw, linestyle=ls, label='T-M')

    plt.plot(corrs_v1.mean(1), 'C5o', linewidth=lw, alpha=al)
    plt.axhline(corrs_v1.mean(), color='C5', linewidth=lw, linestyle=ls, label='S-V-N*')

    plt.plot(corrs_v2.mean(1), 'C6o', linewidth=lw, alpha=al)
    plt.axhline(corrs_v2.mean(), color='C6', linewidth=lw, linestyle=ls, label='S-V')

    plt.plot(corrs_v3.mean(1), 'C7o', linewidth=lw, alpha=al)
    plt.axhline(corrs_v3.mean(), color='C7', linewidth=lw, linestyle=ls, label='V')

    plt.plot(corrs_canny.mean(1), 'C8o', linewidth=lw, alpha=al)
    plt.axhline(corrs_canny.mean(), color='C8', linewidth=lw, linestyle=ls, label='Canny')

    plt.ylim(0., 1.)
    plt.legend(loc='upper right')
    plt.savefig(filename + '.png', dpi=300)
    plt.close()


plot_results(res_nonoise, 'results_nonoise')
plot_results(res_noise, 'results_noise')
